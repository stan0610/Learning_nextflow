port = 3306)
# Load RMySQL package
library(RMySQL)
# testing onlinedatabase connection
dbUCSClive <- dbConnect(MySQL(),
user = 'genomep',
password = 'password',
dbname = 'hg19',
host = 'genome-euro-mysql.soe.ucsc.edu',
port = 3306)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
str(iris)
knitr::opts_chunk$set(echo = TRUE)
str(iris)
str(iris)
tinytex::install_tinytex()
selectInput("var",
label = "Select variable for histogram",
choices = c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width"))
selectInput("var",
label = "Select variable for histogram",
choices = c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width"))
title: "BIT07-Shiny"
---
title: "BIT07-Shiny"
library(shiny); runApp('C:/Users/Stan/OneDrive - Hogeschool West-Vlaanderen/SCHOOL/BIT 01 Linux OS/SF/R/ch4_RMarkdown_shiny/BIT04-app.R')
## Bark beetle experiment
# Experiments how parasitoid wasps find beetles
# Wasps in Y-shaped tube with different odors in arms:
# odor bark eaten by adult beetles,
# other arm bark eaten by larval beetles
# 10 wasps entered "adult" odor arm, 17 "larval" odor arm
binom.test(c(10,17), p = 0.5)
binom.test(c(17,10), p = 0.5) # same for 0.5
################################################################################
### Exact test of goodness-of-fit
################################################################################
## Mendelian inheritance experiment (Conover, 1971)
# Plants of two particular genotypes produce progeny
# 1/4 "dwarf" and 3/4 "giant"
# Experiment cross results: 243 dwarf and 682 giant plants
# If "giant" is taken as success,
# H0 is p = 3/4 (alternative != 3/4, p is hypothesized probability of success)
# -> use exact binomial test
binom.test(c(682, 243), p = 3/4)
binom.test(682, 682 + 243, p = 3/4) # same
# -> p-value = 0.3825 -> H0 not rejected
# OR
binom.test(c(243, 682), p = 1/4)
## Bark beetle experiment
# Experiments how parasitoid wasps find beetles
# Wasps in Y-shaped tube with different odors in arms:
# odor bark eaten by adult beetles,
# other arm bark eaten by larval beetles
# 10 wasps entered "adult" odor arm, 17 "larval" odor arm
binom.test(c(10,17), p = 0.5)
binom.test(c(17,10), p = 0.5) # same for 0.5
# -> p-value = 0.2478 -> H0 not rejected
# Other experiment infested bark vs mixed infested uninfested
# 36 wasp entered "infested" arm, 7 entered "mixture" arm
binom.test(c(7,36), p = 0.5)
binom.test(c(36,7), p = 0.5) # same for 0.5
################################################################################
### Chi Square test of goodness-of-fit
################################################################################
# European crossbills have tip of upper bill
# either right or left of the lower bill
# Frequency dependent selection keep 1:1 ratio
# Observation: 1752 right-billed, 1895 left-billed
# H0: p = 1:1, H1: p != 1:1
# correct = FALSE to turn off Yatesâ€™ correction
chisq.test(c(1752,1895), correct = FALSE)
# --> X-squared = 5.6071, p-value = 0.01789 < 0,05
# --> reject H0 --> significantly more left-billed
# OR:
chisq.test(c(1752,1895), correct = FALSE, p = c(0.5,0.5))
################################################################################
### G-test of goodness-of-fit
################################################################################
# Tools for Descriptive Statistics incl. GTest
# install.packages("DescTools")
library(DescTools)
# Log likelihood ratio (G-test) goodness of fit test
# on crossbills observations
GTest(c(1752,1895))
################################################################################
### Chi Square test of independence
################################################################################
## Jackson et al. (2013)
#  Collected data on reactions to vaccines in children
nosevere <- c(4758,8840)
severe <- c(30,76)
children <- data.frame(nosevere, severe,
row.names = c("thigh","arm"))
# Chi-square test
chisq.test(children, correct = FALSE)
################################################################################
### G-test of independence
################################################################################
# chisq.test(children, correct = FALSE)
# --> X-squared = 2.07, p-value = 0.15 > 0.05
library(DescTools)
GTest(children)
################################################################################
### Cochran-Mantel-Haenszel test
################################################################################
# mantelhaen.test requires 3D contingency table in array form
niacin_array <- array(c(2,11,46,41, # FATS study
4,12,67,60, # AFREGS study
1, 4,86,76, # ARBITER.2 study
1, 6,37,32, # HATS study
2, 1,92,93),# CLAS.1 study
dim = c(2, 2, 5), # 2x2 for each study
dimnames = list(
Treatment = c("Niacin", "Placebo"),
Revasc = c("Yes", "No"),
Study = c("FATS", "AFREGS", "ARBITER.2",
"HATS", "CLAS.1")))
dim(niacin_array) # 2 2 5
# View and verify the data in the array
niacin_array
# Perform the test
mantelhaen.test(niacin_array)
################################################################################
### Tukey-Kramer test
################################################################################
## One-way anova example PlantGrowth
# weight vs group (ctrl, trt1, trt2)
plant.df = PlantGrowth
boxplot(weight~group, data = plant.df)
# Use lm function to fit one-way anova model
plant.model = lm(weight ~ group, data = plant.df)
summary(plant.model)
# Make analysis of variance table for model
anova(plant.model)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
if(!require(gridExtra)) {
install.packages("gridExtra")}
if(!require(fmsb)) {
install.packages("fmsb")}
if(!require(dplyr)) {
install.packages("dplyr")}
if(!require(tidyr)) {
install.packages("tidyr")}
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(fmsb)
library(dplyr)
library(tidyr)
# load data
data <- read.csv(file="data/exams.csv", header = TRUE)
########################################################################
# ethnicity and gender distribution
########################################################################
# color
color_gender <- c("#F6C85F", "#234E70")
# barplot
bp1 <- ggplot(data, aes(race.ethnicity))
bp1 + geom_bar(aes(fill = gender),
position = "dodge") +
geom_text(stat="count", aes(label=after_stat(count), group=gender),
position=position_dodge(width=0.9), vjust=-0.5) +
xlab("Ethnicity") +
ylab("Amount of students") +
ylim(0,180) +
ggtitle("participants by ethnicity and gender") +
scale_fill_manual(values=color_gender) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
########################################################################
# boxplots with violin: average score per gender
########################################################################
# boxplot 1: math score
boxp1 <- ggplot(data, aes(x = gender, y = math.score, fill = gender)) +
geom_violin(width=0.8) +
geom_boxplot(width = 0.3, fill = "white", outlier.shape = NA) +
ggtitle("Math scores") +
xlab("Gender") +
ylab("Score") +
scale_fill_manual(values = color_gender, guide = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# boxplot 2: reading score
boxp2 <- ggplot(data, aes(x = gender, y = reading.score, fill = gender)) +
geom_violin(width=0.8) +
geom_boxplot(width = 0.3, fill = "white", outlier.shape = NA) +
ggtitle("Reading scores") +
xlab("Gender") +
ylab("Score") +
scale_fill_manual(values = color_gender, guide = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# boxplot 3: writing score
boxp3 <- ggplot(data, aes(x = gender, y = writing.score, fill = gender)) +
geom_violin(width=0.8) +
geom_boxplot(width = 0.3, fill = "white", outlier.shape = NA) +
ggtitle("Writing scores") +
xlab("Gender") +
ylab("Score") +
scale_fill_manual(values = color_gender, guide = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# fit the 3 boxplots next to eachother in one figure
grid.arrange(boxp1, boxp2, boxp3, ncol = 3)
########################################################################
# boxplots: average score per ethnicity
########################################################################
# colors
color_ethnicity <- c("#006D77", "#83C5BE", "#EDF6F9", "#FFDDD2", "#E29578")
# ethnicities for shorter x labels instead of groupA, groupB,...
ethnicities <- c("A","B","C","D","E")
# boxplot math
boxp1 <- ggplot(data, aes(x = race.ethnicity, y = math.score, fill = race.ethnicity)) +
geom_boxplot() +
ggtitle("Math scores") +
xlab("Ethnic group") +
ylab("Score") +
scale_fill_manual(values = color_ethnicity, guide = "none") +
scale_x_discrete(labels = ethnicities) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# boxplot reading
boxp2 <- ggplot(data, aes(x = race.ethnicity, y = reading.score, fill = race.ethnicity)) +
geom_boxplot() +
ggtitle("Reading scores") +
xlab("Ethnic group") +
ylab("Score") +
scale_fill_manual(values = color_ethnicity, guide = "none") +
scale_x_discrete(labels = ethnicities) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# boxplot writing
boxp3 <- ggplot(data, aes(x = race.ethnicity, y = writing.score, fill = race.ethnicity)) +
geom_boxplot() +
ggtitle("Writing scores") +
xlab("Ethnic group") +
ylab("Score") +
scale_fill_manual(values = color_ethnicity, guide = "none") +
scale_x_discrete(labels = ethnicities) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# fit the 3 boxplots next to eachother in one figure
grid.arrange(boxp1, boxp2, boxp3, ncol = 3)
########################################################################
# radarplot: average scores per parental education
########################################################################
# average scores
average_scores <- data %>%
group_by(parental.level.of.education) %>%
summarise(math = mean(math.score),
reading = mean(reading.score),
writing = mean(writing.score))
# education level in order from lowest to highest
edu_levels <- c("some high school", "high school", "some college",
"associate's degree", "bachelor's degree", "master's degree")
# rearange the level of education in the average_scores dataframe
# in the order of edu_levels
average_scores <- average_scores %>%
mutate(parental.level.of.education = factor(parental.level.of.education,
levels = edu_levels)) %>%
arrange(parental.level.of.education)
# setup
# paste the max an min value above every column in the dataframe
# this needs to be done for the spider plot
average_scores <- rbind(rep(75.9,3) , rep(60,3) , average_scores)
# getting scores
scores <- average_scores[2:4]
# colors
color_parent <- c("#F4A7B9", "#A94C4C", "#D78E43", "#F6C85F", "#76ADC8", "#234E70")
# run the entire block of code beneath this at once, not line by line
# margins
par(mar = c(1, 1, 1, 1))
# spider plot
radarchart(scores,
axistype = 1,
pcol = color_parent,
plwd = 2.3, # A vector of line widths for plot data: Default 1
plty = 1, # A vector of line types for plot data: Default 1:6
cglcol = "grey",
cglty = 1, # Line type for radar grids: Default 3
cglwd = 0.8, # Line width for radar grids: Default 1
vlcex = 1, # Font size magnification for vlabels
axislabcol = "grey",
caxislabels = seq(60, 76, 4),
calcex = 1, # Font size magnification for caxislabels
title = "Average scores per parental level of education",
paxislabels = c("Math", "Reading", "Writing"),
centerzero = FALSE)
# legend for the spider plot
legend(x = 0.65,
y = 1.1,
legend = edu_levels,
col = color_parent,
pch = 20, # the plotting symbols appearing in the legend
bty = "n", # the type of box to be drawn around the legend
pt.cex = 1.8) # size of the legend points
########################################################################
# lollipop plot: influence of preparation on exams
########################################################################
# color
color_prep = c("#519872","#AD343E")
# group by preparation level
preparation <- data %>%
group_by(test.preparation.course) %>%
summarise(math = mean(math.score),
reading = mean(reading.score),
writing = mean(writing.score))
# convert the data frame to long format with tidyr package
preparation_long <- tidyr::gather(preparation,
key = "score_type",
value = "score",
-test.preparation.course)
# plot
ggplot(preparation_long, aes(x = score_type,
y = score,
color = test.preparation.course),
line_width = 20) +
geom_segment(aes(xend = score_type,
yend = 60),
size = 1.25)+
geom_point(size = 5,
shape = 20,
fill = "white") +
labs(title = "Test preparation influence on exams",
x = "Course",
y = "Score",
color = "Test Preparation") +
scale_color_manual(values = color_prep) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
install.packages("Seurat")
install.packages("ggvenn")
install.packages("dplyr")
install.packages("BiocManager")
remove.packages("Matrix")
install.packages("Matrix")
setwd("C:/Users/Stan/OneDrive - Hogeschool West-Vlaanderen/SCHOOL/BIT 01 Linux OS/SF/VIB")
library(MuSiC)
library(tidyverse)
library(Biobase)
# read in both files
# bulk
# read in the bulk file and pass it to the column_to_rownames   function, this will change the rownames to the HGNC symbol
exp_data_table <- read_table("data/exp_data_ALS_gene.tsv") %>% column_to_rownames("hgnc_symbol")
# some filtering is performed and a matrix is made of the object
exp_data_table <- exp_data_table[rowSums(exp_data_table)>1,]
exp_data_table <- as.matrix(exp_data_table)
# expressionset describes HT expression level assays
data_exprs <- Biobase::ExpressionSet(assayData = exp_data_table)
# retrieve expression data from esets
bulk.mtx <- exprs(data_exprs)
# single cell
# read in single cell rds file
pbmc.sce <- readRDS("data/pbmcs_single_cell.RDS")
est.prop <- music_prop(bulk.mtx = bulk.mtx, sc.sce = pbmc.sce, clusters = 'seurat_annotations', samples = 'sampleID')
est.prop$Est.prop.weighted
est.prop$Est.prop.allgene
pbmc.sce$seurat_annotations
jitter.fig = Jitter_Est(list(data.matrix(Est.prop.GSE50244$Est.prop.weighted),
data.matrix(Est.prop.GSE50244$Est.prop.allgene)),
method.name = c('MuSiC', 'NNLS'), title = 'Jitter plot of Est Proportions')
jitter.fig = Jitter_Est(list(data.matrix(Est.prop$Est.prop.weighted),
data.matrix(Est.prop$Est.prop.allgene)),
method.name = c('MuSiC', 'NNLS'), title = 'Jitter plot of Est Proportions')
jitter.fig = Jitter_Est(list(data.matrix(est.prop$Est.prop.weighted),
data.matrix(est.prop$Est.prop.allgene)),
method.name = c('MuSiC', 'NNLS'), title = 'Jitter plot of Est Proportions')
jitter.fig
m.prop = rbind(melt(est.prop$Est.prop.weighted),
melt(est.prop$Est.prop.allgene))
m.prop = rbind(melt(est.prop$Est.prop.weighted),
melt(est.prop$Est.prop.allgene))
install.packages("reshape")
install.packages("reshape")
m.prop = rbind(melt(est.prop$Est.prop.weighted),
melt(est.prop$Est.prop.allgene))
library(reshape)
m.prop = rbind(melt(est.prop$Est.prop.weighted),
melt(est.prop$Est.prop.allgene))
pbmc.sce$seurat_annotations
View(m.prop)
est.prop <- music_prop(bulk.mtx = bulk.mtx, sc.sce = pbmc.sce, clusters = 'seurat_annotations', samples = 'sampleID')
library(MuSiC)
library(tidyverse)
library(reshape)
est.prop <- music_prop(bulk.mtx = bulk.mtx, sc.sce = pbmc.sce, clusters = 'seurat_annotations', samples = 'sampleID')
est.prop = music_prop(bulk.mtx = bulk.mtx, sc.sce = pbmc.sce, clusters = 'seurat_annotations', samples = 'sampleID')
m.prop = rbind(melt(est.prop$Est.prop.weighted),
melt(est.prop$Est.prop.allgene))
View(m.prop)
colnames(m.prop.GSE50244) = c('Sample', 'CellType', 'Prop')
colnames(m.prop) = c('Sample', 'CellType', 'Prop')
proportions = ggplot(m.prop, aes(Prop)) +
geom_point(aes(color = Disease, stroke = D, shape = Disease),
size = 2, alpha = 0.7, position = position_jitter(width=0.25, height=0)) +
facet_wrap(~ CellType, scales = 'free') + scale_colour_manual( values = c('white', "gray20")) +
scale_shape_manual(values = c(21, 24))+ theme_minimal()
proportions
proportions = ggplot(m.prop, aes(Prop)) +
geom_point(aes(stroke = D),
size = 2, alpha = 0.7, position = position_jitter(width=0.25, height=0)) +
facet_wrap(~ CellType, scales = 'free') + scale_colour_manual( values = c('white', "gray20")) +
scale_shape_manual(values = c(21, 24))+ theme_minimal()
proportions
proportions = ggplot(m.prop, aes(Prop)) +
geom_point(size = 2, alpha = 0.7, position = position_jitter(width=0.25, height=0)) +
facet_wrap(~ CellType, scales = 'free') + scale_colour_manual( values = c('white', "gray20")) +
scale_shape_manual(values = c(21, 24))+ theme_minimal()
proportions
proportions = ggplot(m.prop, aes(Prop)) +
#geom_point(aes(color = Disease, stroke = D, shape = Disease),
# size = 2, alpha = 0.7, position = position_jitter(width=0.25, height=0)) +
facet_wrap(~ CellType, scales = 'free') + scale_colour_manual( values = c('white', "gray20")) +
scale_shape_manual(values = c(21, 24))+ theme_minimal()
proportions
proportions = ggplot(m.prop, aes(x = Sample, y = Prop, fill = CellType)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "Proportion", fill = "Cell Type") +
theme_bw() +
theme(legend.position = "bottom")
proportions
proportions = ggplot(m.prop, aes(x = Prop, y = Sample, fill = CellType)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "Proportion", fill = "Cell Type") +
theme_bw() +
theme(legend.position = "bottom")
proportions
proportions = ggplot(m.prop, aes(x = Prop, y = Sample, fill = CellType)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Proportion", y = "Sample", fill = "Cell Type") +
theme_bw() +
theme(legend.position = "bottom")
proportions
m.prop
library(dplyr)
max_prop <- m.prop %>%
group_by(Sample) %>%
filter(Prop == max(Prop)) %>%
select(Sample, CellType)
max_prop
est.prop = music_prop(bulk.mtx = bulk.mtx, sc.sce = pbmc.sce, clusters = 'seurat_annotations', samples = 'sampleID')
library(SingleCellExperiment)
# cell types here have a different order --> specify order of colors so both plots have the same colors for each cell type
healthy_col <- c("#56B4E9", "#0072B2", "#CC79A7", "#F0E442", "#D55E00", "#E69F00", "#009E73", "#999999", "#000000")
healthy_plot = ggplot(healthy_proportions, aes(x = proportion, y = sample_list, fill = cell_type_list)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Proportion", y = "Sample", fill = "Cell Type") +
scale_fill_manual(values = cell_col) +
theme_bw() +
theme(legend.position = "bottom") +
ggtitle("Proportion of Cell Types in Samples")
library(MuSiC)
library(MuSiC)
library(SingleCellExperiment)
library(tidyverse)
library(Biobase)
library(reshape)
library(ggplot2)
library(dplyr)
library(knitr)
# read in both files
# bulk
# read in the bulk file and pass it to the column_to_rownames   function, this will change the rownames to the HGNC symbol
exp_data_table <- read_table("data/exp_data_ALS_gene.tsv") %>% column_to_rownames("hgnc_symbol")
# read in both files
# bulk
# read in the bulk file and pass it to the column_to_rownames   function, this will change the rownames to the HGNC symbol
exp_data_table <- read_table("data/exp_data_ALS_gene.tsv") %>% column_to_rownames("hgnc_symbol")
# some filtering is performed and a matrix is made of the object
exp_data_table <- exp_data_table[rowSums(exp_data_table)>1,]
# some filtering is performed and a matrix is made of the object
exp_data_table <- exp_data_table[rowSums(exp_data_table)>1,]
exp_data_table <- as.matrix(exp_data_table)
exp_data_table <- as.matrix(exp_data_table)
# expressionset describes HT expression level assays
data_exprs <- Biobase::ExpressionSet(assayData = exp_data_table)
# some filtering is performed and a matrix is made of the object
exp_data_table <- exp_data_table[rowSums(exp_data_table)>1,]
exp_data_table <- as.matrix(exp_data_table)
# expressionset describes HT expression level assays
data_exprs <- Biobase::ExpressionSet(assayData = exp_data_table)
# retrieve expression data from esets
bulk.mtx <- exprs(data_exprs)
# single cell
# read in single cell rds file
pbmc.sce <- readRDS("data/pbmcs_single_cell.RDS")
setwd("C:/Users/Stan/OneDrive - Hogeschool West-Vlaanderen/SCHOOL/BIT 01 Linux OS/SF/singlecell_Stan/learning_nextflow/tryout_scripts")
# setup
x <-paste("C:/Users/Stan/OneDrive - Hogeschool West-Vlaanderen/SCHOOL/",
"BIT 01 Linux OS/SF/singlecell_Stan/learning_nextflow/",
"tryout_scripts/bin/", sep="")
setwd(x)
library(dplyr)
library(knitr)
library(tidyverse)
library(ggplot2)
library(ggridges)
library(htmlTable)
# setup
# x <-paste("C:/Users/Stan/OneDrive - Hogeschool West-Vlaanderen/SCHOOL/",
#           "BIT 01 Linux OS/SF/singlecell_Stan/learning_nextflow/",
#           "tryout_scripts/bin/", sep="")
#setwd(x)
library(dplyr)
library(knitr)
library(tidyverse)
library(ggplot2)
library(ggridges)
library(htmlTable)
.libPaths()
